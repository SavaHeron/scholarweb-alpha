doctype html
head
    title 404
    meta(charset='utf-8')
    meta(name='viewport' content='width=device-width, initial-scale=1')
    link(rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css')
    link(rel='stylesheet' href='resources/401.css')
    script(type='text/javascript' src='https://code.jquery.com/jquery-3.3.1.slim.min.js')
    script(type='text/javascript' src='https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js')
    script(type='text/javascript' src='https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js')
body
nav.navbar.navbar-light.bg-light.navbar-expand-sm
    a.navbar-brand(href='/ ') Scholar
    button.navbar-toggler(type='button' data-toggle='collapse' data-target='#navbar-list-3' aria-controls='navbarNav' aria-expanded='false' aria-label='Toggle navigation')
    #navbar-list-1.collapse.navbar-collapse.justify-content-between
        ul.navbar-nav
            li.nav-item.dropdown
                a#navbarDropdownMenuLink.nav-link.dropdown-toggle(href='#' role='button' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false') Features
                .dropdown-menu(aria-labelledby='navbarDropdownMenuLink')
                    a.dropdown-item(href='/features #f1') f1
                    a.dropdown-item(href='/features #f2') f2
                    a.dropdown-item(href='/features #f3') f3
                    a.dropdown-item(href='/features #f4') f4
                    a.dropdown-item(href='/features #f5') f5
    #navbar-list-2.collapse.navbar-collapse
        ul.navbar-nav
            li.nav-item
                a.nav-link(href='/signup') Sign Up
    #navbar-list-3.collapse.navbar-collapse.justify-content-between
        ul.navbar-nav
            li.nav-item
                a.nav-link(href='/login') Login
.container 
    .error
        h1
            span.errorMessage
            span.blink
script.
  var _createClass = function () {
      function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor) descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
          }
      }
      return function (Constructor, protoProps, staticProps) {
          if (protoProps) defineProperties(Constructor.prototype, protoProps);
          if (staticProps) defineProperties(Constructor, staticProps);
          return Constructor;
      };
  }();

  function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
      }
  }
  var TextScramble = function () {
      function TextScramble(el) {
          _classCallCheck(this, TextScramble);
          this.el = el;
          this.chars = '!<>-_\\/[]{}â€”=+*^?#_ABCDEFGHIJKLMNOPQRSTUVWXYZ@~';
          this.update = this.update.bind(this);
      }
      _createClass(TextScramble, [{
          key: 'setText',
          value: function setText(
              newText) {
              var _this = this;
              var oldText = this.el.innerText;
              var length = Math.max(oldText.length, newText.length);
              var promise = new Promise(function (resolve) {
                  return _this.resolve = resolve;
              });
              this.queue = [];
              for (var i = 0; i < length; i++) {
                  var from = oldText[i] || '';
                  var to = newText[i] || '';
                  var start = Math.floor(Math.random() * 80);
                  var end = start + Math.floor(Math.random() * 80);
                  this.queue.push({
                      from: from,
                      to: to,
                      start: start,
                      end: end
                  });
              }
              cancelAnimationFrame(this.frameRequest);
              this.frame = 0;
              this.update();
              return promise;
          }
      }, {
          key: 'update',
          value: function update() {
              var output = '';
              var complete = 0;
              for (var i = 0, n = this.queue.length; i < n; i++) {
                  var _queue$i =
                      this.queue[i],
                      from = _queue$i.from,
                      to = _queue$i.to,
                      start = _queue$i.start,
                      end = _queue$i.end,
                      char = _queue$i.char;
                  if (this.frame >= end) {
                      complete++;
                      output += to;
                  } else if (this.frame >= start) {
                      if (!char || Math.random() < 0.28) {
                          char = this.randomChar();
                          this.queue[i].char = char;
                      }
                      output += '<span class="dud">' + char + '</span>';
                  } else {
                      output += from;
                  }
              }
              this.el.innerHTML = output;
              if (complete === this.queue.length) {
                  this.resolve();
              } else {
                  this.frameRequest = requestAnimationFrame(this.update);
                  this.frame++;
              }
          }
      }, {
          key: 'randomChar',
          value: function randomChar() {
              return this.chars[Math.floor(Math.random() * this.chars.length)];
          }
      }]);
      return TextScramble;
  }();

  var phrases = [
      '401 UNAUTHORISED',
      'The request has not been applied because it lacks valid authentication credentials for the target resource.'
  ];

  var el = document.querySelector('.errorMessage');
  var fx = new TextScramble(el);

  var counter = 0;
  var next = function next() {
      fx.setText(phrases[counter]).then(function () {
          setTimeout(next, 2000);
      });
      counter = (counter + 1) % phrases.length;
  };

  next();